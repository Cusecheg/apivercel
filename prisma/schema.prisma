generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  lastname         String
  email            String            @unique
  password         String
  token_password   String?
  phone            String
  cpf              String            @unique
  city             String
  birth_date       DateTime
  approved_terms   Boolean
  role             Role
  professionId     String?
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  accessLogs       AccessLog[]
  scores           Score[]
  scorePermissions ScorePermission[]
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  profession       Profession?       @relation(fields: [professionId], references: [id], onDelete: Cascade)
}

model Profession {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  users     User[]
}

model Company {
  id               String            @id @default(uuid())
  name             String            @unique
  email            String            @unique
  cnpj             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  images           ImagesCompany[]
  scores           Score[]
  scorePermissions ScorePermission[]
  users            User[]
}

model Score {
  id                  String   @id @default(uuid())
  userId              String
  companyId           String
  scorePermissionId   String   @unique
  points              Int
  description         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scorePermission     ScorePermission  @relation(fields: [scorePermissionId], references: [id], onDelete: Cascade)
}

model ScorePermission {
  id          String     @id @default(uuid())
  userId      String
  companyId   String
  points      Int
  status      StatusType @default(pending)
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade )
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Score?
}

model ImagesCompany {
  id          String   @id @default(uuid())
  companyId   String
  description String
  url         String
  position    Int
  isVisible   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model AccessLog {
  id        String   @id @default(uuid())
  userId    String?
  ipAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum Role {
  admin
  company
  associated
}

enum StatusType {
  pending
  approved
  rejected
}
